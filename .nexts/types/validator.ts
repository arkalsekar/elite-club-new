// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ..\..\app\about\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\about\\page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ..\..\app\admin\certificate\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\certificate\\page.js")
  handler satisfies AppPageConfig<"/admin/certificate">
}

// Validate ..\..\app\admin\gallery\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\gallery\\page.js")
  handler satisfies AppPageConfig<"/admin/gallery">
}

// Validate ..\..\app\admin\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ..\..\app\admin\teamapproval\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\teamapproval\\page.js")
  handler satisfies AppPageConfig<"/admin/teamapproval">
}

// Validate ..\..\app\admin\users\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\users\\page.js")
  handler satisfies AppPageConfig<"/admin/users">
}

// Validate ..\..\app\certificate\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\certificate\\[id]\\page.js")
  handler satisfies AppPageConfig<"/certificate/[id]">
}

// Validate ..\..\app\gallery\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\gallery\\page.js")
  handler satisfies AppPageConfig<"/gallery">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\profile\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\profile\\page.js")
  handler satisfies AppPageConfig<"/profile">
}

// Validate ..\..\app\teamRegister\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\teamRegister\\page.js")
  handler satisfies AppPageConfig<"/teamRegister">
}

// Validate ..\..\app\team\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\team\\page.js")
  handler satisfies AppPageConfig<"/team">
}

// Validate ..\..\app\verifyCertificate\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\verifyCertificate\\page.js")
  handler satisfies AppPageConfig<"/verifyCertificate">
}







// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
